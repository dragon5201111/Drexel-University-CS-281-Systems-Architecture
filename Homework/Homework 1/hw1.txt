1.)
# Part a.
nor:
    or s1, s2, s3               # Perform bitwise OR on registers s2 and s3, result in s1
    xori s1, s1, 0xFFFFFFFF     # XOR the value in s1 with 0xFFFFFFFF to flip all bits
    ret                         # Return from the function to ra

# Part b.
nand:
    and s1, s2, s3              # Perform bitwise AND on registers s2 and s3, result in s1
    xori s1, s1, 0xFFFFFFFF     # XOR the value in s1 with 0xFFFFFFFF to flip all bits
    ret                         # Return from the function to ra


2.) 
The load/store architecture in RISC-V operates on the principle that that all arithmetic operations get their operands from,
and produce results in registers, and communication between memory and registers requires separate “load” and “store” operations. 
In other words, all arithmetic operations must be loaded from memory into registers, and the results must be stored back into memory through separate 
"load" and "store" instructions. This has a significant trade-off for programmers
as they are now responsible for manipulating memory at a lower level - which in turn increases code complexity. 
For example, in C, to increment an integer variable "x" by one all that would be necessary,
is simply "x++;" or "x+=1;". However, a load/store architecture demands more. The programmer would need to explicitly load the value of "x"
from memory into a register, perform the addition operation on the register, and then store the updated value back to memory.
Ultimately, the load/store model removes a layer of abstraction that modern programming languages typically manage automatically.
This means programmers must take on more responsibility for memory operations, resulting in more granular control but also greater code complexity.

3.)
Designing a custom processor from scratch would be a significant challenge, even for a skilled hardware designer.
It would require defining a new instruction set architecture (ISA), building the processor, and going through the manufacturing process.
Moreover, if you need to run existing software on the IoT device, it would need to be adapted to fit the specifications of your custom processor.
In most cases, this makes designing your own processor impractical. RISC-V stands out as an appealing option compared to alternatives like ARM or Intel/AMD,
mainly because it is open-source. This openness allows anyone to design custom hardware based on the RISC-V architecture and even sell it, 
making it a flexible and cost-effective solution. In contrast, using other processor architectures like ARM or Intel/AMD typically involves licensing fees,
making the process more complex and expensive. Therefore, RISC-V offers a compelling choice for a processor.